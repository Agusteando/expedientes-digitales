generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  superadmin
  admin
  employee
  candidate
}

model Plantel {
  id   Int    @id @default(autoincrement())
  name String @unique
  label String?

  // One-to-many: “employees” (User → Plantel)
  users User[] @relation("Employees")

  // Many-to-many: “admins” (User ↔ Plantel)
  admins User[] @relation("PlantelAdmins")
}

model User {
  id              Int       @id @default(autoincrement())
  name            String
  email           String    @unique
  apellidoPaterno String?
  apellidoMaterno String?
  nombres         String?
  picture         String?
  passwordHash    String?
  rfc             String?
  curp            String?
  // Ficha técnica fields:
  domicilioFiscal String?
  fechaIngreso    DateTime?
  puesto          String?
  sueldo          Decimal?
  horarioLaboral  String?
  nss             String?
  // End ficha

  // External system IDs
  pathId      String?
  evaId       String?
  ingressioId String?
  noiId       String?

  role           Role            @default(candidate)
  isActive       Boolean         @default(true)
  plantelId      Int?
  plantel        Plantel?        @relation("Employees", fields: [plantelId], references: [id])
  canSign        Boolean         @default(false)
  isApproved     Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  documents      Document[]
  checklistItems ChecklistItem[]
  signatures     Signature[]
  plantelesAdmin Plantel[]       @relation("PlantelAdmins")
  passwordResetTokens PasswordResetToken[]
}

model PasswordResetToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  expiresAt  DateTime
  used       Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model Document {
  id             String          @id @default(cuid())
  userId         Int
  user           User            @relation(fields: [userId], references: [id])
  type           String
  status         String          @default("PENDING")
  filePath       String
  uploadedAt     DateTime        @default(now())
  version        Int
  reviewComment  String?
  checklistItems ChecklistItem[]
}

model ChecklistItem {
  id         String    @id @default(cuid())
  userId     Int
  user       User      @relation(fields: [userId], references: [id])
  documentId String?
  document   Document? @relation(fields: [documentId], references: [id])
  type       String
  required   Boolean   @default(true)
  fulfilled  Boolean   @default(false)

  @@unique([userId, type])
}

model Signature {
  id         String    @id @default(cuid())
  userId     Int
  user       User      @relation(fields: [userId], references: [id])
  type       String
  status     String
  signedAt   DateTime?
  mifielData Json?
  createdAt  DateTime  @default(now())
}
