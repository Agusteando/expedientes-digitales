generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  superadmin
  admin
  employee
  candidate
}

model Plantel {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
  documents Document[]
}

model User {
  id             Int       @id @default(autoincrement())
  name           String
  email          String    @unique
  picture        String?
  passwordHash   String?   // for non-admin/candidate login
  rfc            String?   // for employees/candidates
  curp           String?   // for employees/candidates
  role           Role      @default(candidate)
  isActive       Boolean   @default(true)
  plantelId      Int?
  plantel        Plantel?  @relation(fields: [plantelId], references: [id])
  canSign        Boolean   @default(false)
  isApproved     Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  documents      Document[]
  checklistItems ChecklistItem[]
  signatures     Signature[]
}

model Document {
  id            String          @id @default(cuid())
  userId        Int
  user          User            @relation(fields: [userId], references: [id])
  plantelId     Int
  plantel       Plantel         @relation(fields: [plantelId], references: [id])
  type          String
  status        String          @default("PENDING")
  filePath      String
  uploadedAt    DateTime        @default(now())
  checklistItems ChecklistItem[]
}

model ChecklistItem {
  id         String    @id @default(cuid())
  userId     Int
  user       User      @relation(fields: [userId], references: [id])
  documentId String?   // optional, assigned after upload
  document   Document? @relation(fields: [documentId], references: [id])
  type       String
  required   Boolean   @default(true)
  fulfilled  Boolean   @default(false)
}

model Signature {
  id         String    @id @default(cuid())
  userId     Int
  user       User      @relation(fields: [userId], references: [id])
  type       String    // "simple" or "advanced"
  status     String    // "pending", "signed", "failed"
  signedAt   DateTime?
  mifielData Json?
  createdAt  DateTime  @default(now())
}
